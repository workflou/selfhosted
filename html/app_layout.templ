package html

import "selfhosted/app"

templ AppLayout(title string, breadcrumbs []Breadcrumb) {
	@BaseLayout(title) {
		<div class="flex min-h-screen transition-all duration-300 bg-zinc-200/80 group/layout no-transitions" id="layout-root">
			<input
				type="checkbox"
				_="
				on load
					if window.matchMedia('(max-width: 1024px)').matches
						set :checkedVar to false
					else if localStorage.getItem('sidebar') === null
						set localStorage.sidebar to true
						set :checkedVar to true
					else
						set :checkedVar to (localStorage.sidebar === true or localStorage.sidebar === 'true')
					end
					set my.checked to :checkedVar
					wait 10ms
					remove .no-transitions from #layout-root
				on change
					if not window.matchMedia('(max-width: 1024px)').matches
						set localStorage.sidebar to my.checked
					end
				on resize from window
					if window.matchMedia('(max-width: 1024px)').matches
						set my.checked to false
					else
						if localStorage.getItem('sidebar') === null
							set my.checked to true
						else
							set my.checked to (localStorage.sidebar === true or localStorage.sidebar === 'true')
						end
					end
				"
				class="peer hidden"
				id="sidebar-toggle"
				checked
			/>
			@SidebarOverlay()
			@Sidebar()
			<div class="flex-1 p-3 py-2 lg:pl-3 lg:peer-checked:pl-72 transition-all duration-200 ease-in-out">
				<div class="p-3 flex gap-2 h-12 flex items-center pl-11">
					<label for="sidebar-toggle" class="fixed left-6 group-has-[#sidebar-toggle:checked]/layout:left-75 transition-all duration-200 ease-in-out z-[999]">
						<div class="cursor-pointer">
							@SidebarIcon("size-4 text-zinc-900 hover:text-black transition-colors duration-200 ease-in-out")
						</div>
					</label>
					@Breadcrumbs(breadcrumbs)
				</div>
				<div class="flex flex-col gap-4 text-zinc-800 px-2 py-1">
					{ children... }
				</div>
			</div>
		</div>
	}
}

templ Sidebar() {
	{{ user := app.GetUserFromContext(ctx) }}
	<div
		class="w-72 h-screen p-3 py-2 bg-zinc-200/60 backdrop-blur-sm lg:bg-transparent fixed -ml-72 peer-checked:ml-0 transition-all duration-200 ease-in-out border-r border-zinc-300 lg:border-none shadow-lg lg:shadow-none z-[999]"
	>
		<div class="flex flex-col gap-3 h-full overflow-y-auto">
			<div class="shrink-0 px-2 py-2">
				@Logo()
			</div>
			<div class="shrink-0">
				@Separator()
			</div>
			<nav class="flex flex-col gap-4 flex-1 overflow-y-auto px-1 min-h-[200px]">
				<ul class="flex flex-col gap-0.5 text-zinc-900 font-medium">
					@NavLink(NavlinkProps{Url: "/", Strict: true}) {
						@HomeIcon("size-5 text-zinc-400 group-hover:text-black group-data-[active]:text-black shrink-0")
						<span class="truncate">Dashboard</span>
					}
					@NavLink(NavlinkProps{Url: "/about"}) {
						@FolderOpenIcon("size-5 text-zinc-400 group-hover:text-black group-data-[active]:text-black shrink-0")
						<span class="truncate">About Page</span>
					}
				</ul>
			</nav>
			if user != nil {
				<div class="shrink-0">
					@Separator()
				</div>
				<nav>
					<ul class="flex flex-col gap-0.5">
						// @NavLinkGroup(fmt.Sprintf("%s", user.Name))
						@NavLink(NavlinkProps{Url: "/help", External: true}) {
							@HelpIcon("size-5 text-zinc-400 group-hover:text-black group-data-[active]:text-black shrink-0")
							<span class="truncate">Help</span>
						}
						@NavLink(NavlinkProps{Url: "/settings"}) {
							@AdjustmentsVerticalIcon("size-5 text-zinc-400 group-hover:text-black group-data-[active]:text-black shrink-0")
							<span class="truncate">Settings</span>
						}
						// <li class="group">
						// 	<a href="/logout" class="group flex gap-2 text-sm items-center hover:bg-gradient-to-b hover:from-white hover:to-zinc-100 hover:shadow-sm group-data-[active]:bg-gradient-to-b group-data-[active]:from-white group-data-[active]:to-zinc-100 group-data-[active]:shadow-sm rounded-xl outline-white/60 border border-transparent hover:border-white p-2">
						// 		@OutIcon("size-5 text-zinc-400 group-hover:text-black group-data-[active]:text-black shrink-0")
						// 		<span class="truncate">Sign Out</span>
						// 	</a>
						// </li>
					</ul>
				</nav>
				<div class="shrink-0">
					@UserMenu()
				</div>
			}
		</div>
	</div>
}

templ SidebarOverlay() {
	<label
		for="sidebar-toggle"
		class="fixed inset-0 bg-zinc-100/5 hidden peer-checked:block lg:peer-checked:hidden lg:hidden cursor-pointer backdrop-blur-[5px] z-[998]"
	></label>
}

templ UserMenu() {
	{{ user := app.GetUserFromContext(ctx) }}
	<div class="relative bg-gradient-to-t from-zinc-100 to-white rounded-xl p-2 border border-zinc-300/80 outline-white/60 transition-all duration-200 ease-in-out">
		<input type="checkbox" class="peer/user-menu hidden" id="user-menu-toggle"/>
		<input type="checkbox" class="peer/settings-modal hidden" id="settings-modal-toggle"/>
		<label for="user-menu-toggle" class="flex gap-2 items-center cursor-pointer rounded-xl outline-white border border-transparent p-1">
			@UserAvatar(user.Avatar.String, user.Name)
			<div class="flex flex-col flex-1 min-w-0">
				@UserName(user.Name)
				<span class="text-xs text-zinc-500 truncate">
					A.C.M.E.
				</span>
			</div>
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5 text-zinc-400">
				<path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15 12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"></path>
			</svg>
		</label>
	</div>
}

templ UserName(name string) {
	<span class="text-sm text-zinc-800 font-semibold truncate" id="user-name" hx-swap-oob="true">
		{ name }
	</span>
}

templ UserAvatar(avatar, name string) {
	<div id="user-avatar" hx-swap-oob="true">
		if avatar == "" {
			<div class="size-8 rounded-full bg-zinc-600 flex items-center justify-center shrink-0">
				<span class="text-white text-sm font-semibold">{ string( name[0]) }</span>
			</div>
		} else {
			<img src={ avatar } alt="{ user.Name }'s avatar" class="size-8 rounded-full object-cover shrink-0"/>
		}
	</div>
}

templ Separator() {
	<div class="flex flex-col items-center justify-stretch">
		<div class="h-[1px] bg-zinc-300/80 w-full"></div>
		<div class="h-[1px] bg-white/60 w-full"></div>
	</div>
}

type Breadcrumb struct {
	Label string
	Url   string
}

templ Breadcrumbs(breadcrumbs []Breadcrumb) {
	if len(breadcrumbs) > 0 {
		<div class="flex items-center gap-4 text-sm text-zinc-500">
			<div class="w-[1px] h-5 bg-zinc-300 block"></div>
			<div class="flex items-center gap-2 min-w-0">
				for i, breadcrumb := range breadcrumbs {
					if i > 0 {
						<span class="text-xs hidden lg:block flex-shrink-0">&gt;</span>
					}
					if breadcrumb.Url != "" {
						<a
							href={ templ.URL(breadcrumb.Url) }
							class={
								"hover:text-zinc-800 hover:underline truncate min-w-0 max-w-[200px]",
								templ.KV("hidden lg:block", i != len(breadcrumbs)-1),
							}
						>
							{ breadcrumb.Label }
						</a>
					} else {
						<span
							class={
								"text-zinc-900 truncate min-w-0 max-w-[200px]",
								templ.KV("hidden lg:block", i != len(breadcrumbs)-1),
							}
						>{ breadcrumb.Label }</span>
					}
				}
			</div>
		</div>
	} else {
		<div></div>
	}
}

type NavlinkProps struct {
	Url      string
	Strict   bool
	External bool
}

templ NavLink(props NavlinkProps) {
	<li data-active?={ app.IsActiveUrl(ctx, props.Url, props.Strict) } class="group">
		<a
			hx-boost
			if props.External {
				target="_blank"
			}
			href={ templ.URL(props.Url) }
			class="group flex gap-2 text-sm items-center hover:bg-gradient-to-b hover:from-white hover:to-zinc-100 hover:shadow-sm group-data-[active]:bg-gradient-to-b group-data-[active]:from-white group-data-[active]:to-zinc-100 group-data-[active]:shadow-sm rounded-xl outline-white/60 border border-transparent hover:border-white p-2"
		>
			<span class="flex-1 min-w-0 truncate flex items-center gap-2">
				{ children... }
			</span>
			if props.External {
				@ExternalIcon("size-4 text-zinc-400 group-hover:text-black group-data-[active]:text-black shrink-0")
			}
		</a>
	</li>
}

templ NavLinkGroup(label string) {
	<li class="group">
		<span class="text-xs text-zinc-500 px-2 font-medium truncate">
			{ label }
		</span>
	</li>
}

templ Logo() {
	<a href="/" class="flex items-center gap-2">
		<img src="/static/img/logo.svg" alt="Logo" class="size-8"/>
		<span class="text-lg font-semibold text-zinc-900">SelfHosted</span>
	</a>
}
